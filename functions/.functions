#!/usr/bin/env zsh
fg() {
    if [[ $# -eq 1 && $1 = - ]]; then
        builtin fg %-;
    elif [[ "$*" =~ ^[0-9]+$ ]]; then
        builtin fg %"$*";
    else
        builtin fg "$@";
    fi
}

tsm() { transmission-remote -l; }
tsm-f() { watch 'transmission-remote -l'; }
tsm-init() { transmission-daemon --no-auth; }
tsm-pause() { transmission-remote -t "$1" --stop; }
tsm-start() { transmission-remote -t "$1" -s; }
tsm-enablealtspeed() { transmission-remote --alt-speed; }
tsm-disablealtspeed() { transmission-remote --no-alt-speed; }
tsm-purge () { transmission-remote -t "$1" --remove-and-delete; }
tsm-remove () { transmission-remote -t "$1" -r; }
tsm-info () { transmission-remote -t "$1" -i; }
tsm-speed () { transmission -t"$1" -i | grep speed; }
tsm-add () { transmission-remote -a "$1"; }
tsm-pauseall () { transmission-remote -tall -S; }
tsm-startall () { transmission-remote -tall -s; }
tsm-search () { echo "================================="; transmission-remote -l | grep -i $1; }

what() {
    curl cheat.sh/$1;
}

check-url() {
    curl -Ifs "$1" > /dev/null
}

nvim-update() {
    build=${1:-nightly}
    current=$(pwd)
    nvim_version=nightly
    nvim_dir=$HOME/.neovim
    stow_dir=$HOME/stow-dotfiles
    stow_dir_hidden=$HOME/.stow-dotfiles

    printf "One moment...\n\n"
    sleep 1

    # Check if neovim is installed
    if command -v nvim > /dev/null; then
        nvim_version=$(nvim -v | cut -d' ' -f2 | head -n1)
        if [[ "$nvim_version" != "$build" ]]; then
            printf "You requested a different Neovim version (%s)\n\nThe current version (%s) will be replaced.\n\n" "$build" "$nvim_version"
            rm -rf "$nvim_dir"
        else
            printf "You already have the current Neovim version: %s\n\n" "$nvim_version"
            exit 0
        fi
    else
        printf "A new version of Neovim will be installed %s\n\n" "$build"
    fi

    # Make the neovim directory
    printf "Fetching neovim if necessary...\n\n"
    mkdir -p "$nvim_dir"
    cd "$nvim_dir"

    # Determine correct release url
    URL1="https://github.com/neovim/neovim/releases/download/$build/nvim-linux-x86_64.tar.gz"
    URL2="https://github.com/neovim/neovim/releases/download/$build/nvim-linux64.tar.gz"

    if check-url "$URL1"; then
        printf "Download succeeded from primary neovim URL.\n"
	target=$URL1	
	directory="nvim-linux-x86_64"
	filename="$directory.tar.gz"
    else
        printf "Primary neovim URL failed, trying fallback...\n"
        if check-url "$URL2"; then
            printf "Download succeeded from fallback neovim URL.\n"
	    target=$URL2
	    directory="nvim-linux64"
	    filename="$directory.tar.gz"
        else
            printf "Both neovim URLs failed.\n"
            exit 1
        fi
    fi

    # Check if the file exists and is older than 1 day
    if [ ! -f "$filename" ] || [ "$(find $filename -mtime +0)" ]; then
        printf "Downloading Neovim...\n"
        sleep 1
        rm -rf "$directory"
        rm -rf "$filename"
        wget "$target"
        tar -xzf "$filename"
    else
        printf "Neovim is up-to-date\n\n"
    fi

    # Update dotfiles
    printf "Pulling stow-dotfiles...\n\n"
    if [ -d "$stow_dir" ]; then
        cd $stow_dir
        if [ -d "$stow_dir/nvim/.config/nvim/lazy-lock.json" ]; then
            git checkout ~/stow-dotfiles/nvim/.config/nvim/lazy-lock.json
        fi
    elif [ -d "$stow_dir_hidden" ]; then
        cd $stow_dir_hidden
        if [ -d "$stow_dir_hidden/nvim/.config/nvim/lazy-lock.json" ]; then
            git checkout ~/.stow-dotfiles/nvim/.config/nvim/lazy-lock.json
        fi
    fi

    # Update neovim plugins
    pull_output=$(git pull -v)
    printf "%s\n" "$pull_output"
    if [[ "$pull_output" != *"Already up to date."* ]]; then
        printf "\n\nUpdating neovim plugins...\n\n"
        nvim --headless "+Lazy! update" +UpdateRemotePlugins +TSUpdate +qa
        printf "\n\nUpdate complete!\n"
        zsh
    else
        printf "\n\nAll good, no updates are necessary!\n"
    fi

    cd $current
}

# Backup a drive to a target
backup_drive() {
  # Check if both source and target are provided
  if [[ $# -ne 2 ]]; then
    echo "Usage: backup_drive <source_device> <target_image>"
    return 1
  fi

  # Define the source and target from the arguments
  local source="$1"
  local target="$2"

  # Set the log file path in /var/log
  local logfile="/var/log/backup_drive.log"

  # Check if the source device exists
  if [[ ! -e "$source" ]]; then
    echo "Error: Source device $source does not exist" | tee -a $logfile
    return 1
  fi

  # Start the backup process
  echo "Starting backup of $source to $target at $(date)" | sudo tee -a $logfile

  # Create the backup using dd
  sudo dd if="$source" of="$target" bs=4M status=progress conv=noerror,sync

  # Check if the dd command was successful
  if [[ $? -eq 0 ]]; then
    echo "Backup completed successfully at $(date)" | sudo tee -a $logfile
  else
    echo "Backup failed at $(date)" | sudo tee -a $logfile
    return 1
  fi
}

# Backup a directory to a target
backup_rsync() {
  # Check if both source and target are provided
  if [[ $# -ne 2 ]]; then
    echo "Usage: backup_rsync <source_directory_or_file> <remote_target_tar_file>"
    return 1
  fi

  # Define the source and target from the arguments
  local source="$1"
  local target="$2"

  # Get the current date in YYYY-MM-DD format
  local current_date=$(date +'%Y-%m-%d')

  # Get the log file path in /var/log
  local logfile="/var/log/rsync_backup.log"

  # Ensure the target ends with .tar.gz
  if [[ "$target" != *.tar.gz ]]; then
    echo "Error: Target file must end with .tar.gz" | sudo tee -a $logfile
    return 1
  fi

  # Create a temporary tarball
  local temp_tarball="/tmp/backup_${current_date}.tar.gz"

  # Start the backup process
  echo "Creating tarball of $source at $(date)" | sudo tee -a $logfile

  # Create the tarball
  tar -czvf "$temp_tarball" -C "$(dirname "$source")" "$(basename "$source")"

  # Check if tar was successful
  if [[ $? -ne 0 ]]; then
    echo "Tar creation failed at $(date)" | sudo tee -a $logfile
    return 1
  fi

  # Transfer the tarball to the remote server using rsync
  echo "Transferring $temp_tarball to $target at $(date)" | sudo tee -a $logfile
  rsync -avh --progress "$temp_tarball" "$target"

  # Check if rsync was successful
  if [[ $? -eq 0 ]]; then
    echo "Backup completed successfully and transferred to $target at $(date)" | sudo tee -a $logfile
  else
    echo "Backup transfer failed at $(date)" | sudo tee -a $logfile
    return 1
  fi

  # Clean up the temporary tarball
  rm -f "$temp_tarball"

  # Check if cleanup was successful
  if [[ $? -eq 0 ]]; then
    echo "Temporary tarball removed successfully at $(date)" | sudo tee -a $logfile
  else
    echo "Failed to remove temporary tarball at $(date)" | sudo tee -a $logfile
  fi
}

