#!/usr/bin/env zsh
fg() {
    if [[ $# -eq 1 && $1 = - ]]; then
        builtin fg %-;
    elif [[ "$*" =~ ^[0-9]+$ ]]; then
        builtin fg %"$*";
    else
        builtin fg "$@";
    fi
}

tsm() { transmission-remote -l; }
tsm-f() { watch 'transmission-remote -l'; }
tsm-init() { transmission-daemon --no-auth; }
tsm-pause() { transmission-remote -t "$1" --stop; }
tsm-start() { transmission-remote -t "$1" -s; }
tsm-enablealtspeed() { transmission-remote --alt-speed; }
tsm-disablealtspeed() { transmission-remote --no-alt-speed; }
tsm-purge () { transmission-remote -t "$1" --remove-and-delete; }
tsm-remove () { transmission-remote -t "$1" -r; }
tsm-info () { transmission-remote -t "$1" -i; }
tsm-speed () { transmission -t"$1" -i | grep speed; }
tsm-add () { transmission-remote -a "$1"; }
tsm-pauseall () { transmission-remote -tall -S; }
tsm-startall () { transmission-remote -tall -s; }
tsm-search () { echo "================================="; transmission-remote -l | grep -i $1; }

portal-up() {
    wg-quick up will_p43s
}

portal-down() {
    wg-quick down will_p43s
}

what() {
    curl cheat.sh/$1;
}

killer() {
  local selection
  
  # List processes with PID and command, then pass to fzf
  selection=$(ps -eo pid,user,command --no-headers | fzf --height=40% --reverse --prompt="Select process to kill: ")
  
  if [[ -n "$selection" ]]; then
    local pid=$(awk '{print $1}' <<< "$selection")
    echo "Killing process: $selection"
    kill -9 "$pid"
  else
    echo "No process selected."
  fi
}

check-url() {
    curl -Ifs "$1" > /dev/null
}

nvim-update() {
    local build=${1:-nightly}
    local current=$(pwd)
    local nvim_dir=$HOME/.neovim
    local stow_dir=$HOME/.dotfiles
    local stow_dir_alt=$HOME/.stow-dotfiles
    local directory=""
    local filename=""
    local target=""

    echo "One moment..."
    
    # Check if neovim is installed and compare versions
    if command -v nvim > /dev/null; then
        local nvim_version=$(nvim -v | cut -d' ' -f2 | head -n1)
        if [[ "$nvim_version" != "$build" ]]; then
            echo "You requested a different Neovim version ($build)"
            echo "The current version ($nvim_version) will be replaced."
            rm -rf "$nvim_dir"
        else
            echo "You already have the current Neovim version: $nvim_version"
            return 0
        fi
    else
        echo "A new version of Neovim will be installed: $build"
    fi

    # Make the neovim directory
    echo "Fetching neovim if necessary..."
    mkdir -p "$nvim_dir"
    cd "$nvim_dir" || { echo "Failed to change directory to $nvim_dir"; return 1; }

    # Determine correct release URL
    local URL1="https://github.com/neovim/neovim/releases/download/$build/nvim-linux-x86_64.tar.gz"
    local URL2="https://github.com/neovim/neovim/releases/download/$build/nvim-linux64.tar.gz"
    
    if curl -Ifs "$URL1" > /dev/null; then
        echo "Download succeeded from primary neovim URL."
        target=$URL1
        directory="nvim-linux-x86_64"
    elif curl -Ifs "$URL2" > /dev/null; then
        echo "Download succeeded from fallback neovim URL."
        target=$URL2
        directory="nvim-linux64"
    else
        echo "Both neovim URLs failed."
        return 1
    fi
    
    filename="$directory.tar.gz"

    # Check if the file exists and is older than 1 day
    if [ ! -f "$filename" ] || [ "$(find "$filename" -mtime +0 2>/dev/null)" ]; then
        echo "Downloading Neovim..."
        rm -rf "$directory" "$filename"
        curl -LO "$target" || { echo "Download failed"; return 1; }
        tar -xzf "$filename" || { echo "Extraction failed"; return 1; }
    else
        echo "Neovim is up-to-date"
    fi

    # Update dotfiles from the appropriate directory
    echo "Pulling stow-dotfiles..."
    
    local dotfiles_dir=""
    if [ -d "$stow_dir" ]; then
        dotfiles_dir="$stow_dir"
    elif [ -d "$stow_dir_alt" ]; then
        dotfiles_dir="$stow_dir_alt"
    else
        echo "Dotfiles directory not found"
        cd "$current" || return 1
        return 1
    fi
    
    cd "$dotfiles_dir" || { echo "Failed to change directory to $dotfiles_dir"; return 1; }
    
    # Check and reset lazy-lock.json if it exists
    local lazy_lock="$dotfiles_dir/nvim/.config/nvim/lazy-lock.json"
    if [ -f "$lazy_lock" ]; then
        git checkout "$lazy_lock"
    fi

    # Update neovim plugins
    local pull_output
    pull_output=$(git pull -v)
    echo "$pull_output"
    
    if [[ "$pull_output" != *"Already up to date."* ]]; then
        echo "Update complete!"
        exec zsh
    else
        echo "All good, no updates are necessary!"
    fi
    
    cd "$current" || return 1
}

# --- UNIVERSAL EXTRACTION ---
extract() {
  local file="$1"
  [[ -z "$file" ]] && { echo "Usage: extract <file>"; return 1; }
  [[ ! -f "$file" ]] && { echo "Error: '$file' not found"; return 1; }

  # derive directory name (remove .tar.*, .gz, .bz2, .xz, .zst extensions)
  local base="${file%%.*}"
  base="${file%%.tar.*}"
  base="${base%%.*}"
  local dir="${base%.*}"
  dir="${dir:-${file%.*}}"

  # ensure we don't overwrite existing folder
  if [[ -d "$dir" ]]; then
    dir="${dir}_extracted_$(date +%s)"
  fi
  mkdir -p "$dir"

  echo "→ Extracting into '$dir/' ..."
  case "$file" in
    *.tar.bz2)  tar -xvjf "$file" -C "$dir" ;;
    *.tar.gz)   tar -xvzf "$file" -C "$dir" ;;
    *.tar.xz)   tar -xvJf "$file" -C "$dir" ;;
    *.tar.zst)  tar --use-compress-program=unzstd -xvf "$file" -C "$dir" ;;
    *.tar)      tar -xvf "$file" -C "$dir" ;;
    *.bz2)      bunzip2 -k "$file" && mv "${file%.bz2}" "$dir/" ;;
    *.gz)       gunzip -k "$file" && mv "${file%.gz}" "$dir/" ;;
    *.xz)       unxz -k "$file" && mv "${file%.xz}" "$dir/" ;;
    *.zst)      unzstd -k "$file" && mv "${file%.zst}" "$dir/" ;;
    *)          echo "Cannot extract '$file': unsupported format"; return 1 ;;
  esac
  echo "✔ Done."
}

# --- UNIVERSAL ARCHIVER ---
archive() {
  if [[ $# -lt 2 ]]; then
    echo "Usage: archive <output_name> <file_or_dir> [more_files...]"
    return 1
  fi

  local output="$1"; shift
  local compressor

  case "$output" in
    *.tar.gz)
      compressor=$(command -v pigz >/dev/null && echo "pigz" || echo "gzip")
      tar -cv --use-compress-program="$compressor" -f "$output" "$@"
      ;;
    *.tar.bz2)
      compressor=$(command -v pbzip2 >/dev/null && echo "pbzip2" || echo "bzip2")
      tar -cv --use-compress-program="$compressor" -f "$output" "$@"
      ;;
    *.tar.xz)
      compressor=$(command -v pxz >/dev/null && echo "pxz" || echo "xz")
      tar -cv --use-compress-program="$compressor" -f "$output" "$@"
      ;;
    *.tar.zst)
      compressor=$(command -v zstd >/dev/null && echo "zstd" || echo "gzip")
      tar -cv --use-compress-program="$compressor" -f "$output" "$@"
      ;;
    *.tar)
      tar -cvf "$output" "$@"
      ;;
    *)
      echo "Error: output must end with .tar, .tar.gz, .tar.bz2, .tar.xz, or .tar.zst"
      return 1
      ;;
  esac
  echo "✔ Archive created: $output"
}

# Backup a drive to a target
# example) backup_drive /dev/sda /mnt/drive/backup.tar.gz
backup_drive() {
  # Check if both source and target are provided
  if [[ $# -ne 2 ]]; then
    echo "Usage: backup_drive <source_device> <target_image>"
    return 1
  fi

  # Define the source and target from the arguments
  local source="$1"
  local target="$2"

  # Set the log file path in /var/log
  local logfile="/var/log/backup_drive.log"

  # Check if the source device exists
  if [[ ! -e "$source" ]]; then
    echo "Error: Source device $source does not exist" | tee -a $logfile
    return 1
  fi

  # Start the backup process
  echo "Starting backup of $source to $target at $(date)" | sudo tee -a $logfile

  # Create the backup using dd
  sudo dd if="$source" of="$target" bs=4M status=progress conv=noerror,sync

  # Check if the dd command was successful
  if [[ $? -eq 0 ]]; then
    echo "Backup completed successfully at $(date)" | sudo tee -a $logfile
  else
    echo "Backup failed at $(date)" | sudo tee -a $logfile
    return 1
  fi
}

# Backup a directory to a target
# example) backup_rsync $HOME/.ssh somewhere:/mnt/drive/backup.tar.gz
backup_rsync() {
  # Check if both source and target are provided
  if [[ $# -ne 2 ]]; then
    echo "Usage: backup_rsync <source_directory_or_file> <remote_target_tar_file>"
    return 1
  fi

  # Define the source and target from the arguments
  local source="$1"
  local target="$2"

  # Get the current date in YYYY-MM-DD format
  local current_date=$(date +'%Y-%m-%d')

  # Get the log file path in /var/log
  local logfile="/var/log/rsync_backup.log"

  # Ensure the target ends with .tar.gz
  if [[ "$target" != *.tar.gz ]]; then
    echo "Error: Target file must end with .tar.gz" | sudo tee -a $logfile
    return 1
  fi

  # Create a temporary tarball
  local temp_tarball="/tmp/backup_${current_date}.tar.gz"

  # Start the backup process
  echo "Creating tarball of $source at $(date)" | sudo tee -a $logfile

  # Create the tarball
  tar -czvf "$temp_tarball" -C "$(dirname "$source")" "$(basename "$source")"

  # Check if tar was successful
  if [[ $? -ne 0 ]]; then
    echo "Tar creation failed at $(date)" | sudo tee -a $logfile
    return 1
  fi

  # Transfer the tarball to the remote server using rsync
  echo "Transferring $temp_tarball to $target at $(date)" | sudo tee -a $logfile
  rsync -avh --progress "$temp_tarball" "$target"

  # Check if rsync was successful
  if [[ $? -eq 0 ]]; then
    echo "Backup completed successfully and transferred to $target at $(date)" | sudo tee -a $logfile
  else
    echo "Backup transfer failed at $(date)" | sudo tee -a $logfile
    return 1
  fi

  # Clean up the temporary tarball
  rm -f "$temp_tarball"

  # Check if cleanup was successful
  if [[ $? -eq 0 ]]; then
    echo "Temporary tarball removed successfully at $(date)" | sudo tee -a $logfile
  else
    echo "Failed to remove temporary tarball at $(date)" | sudo tee -a $logfile
  fi
}

