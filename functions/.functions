#!/usr/bin/env zsh
fg() {
    if [[ $# -eq 1 && $1 = - ]]; then
        builtin fg %-;
    elif [[ "$*" =~ ^[0-9]+$ ]]; then
        builtin fg %"$*";
    else
        builtin fg "$@";
    fi
}

tsm() { transmission-remote -l; }
tsm-f() { watch 'transmission-remote -l'; }
tsm-init() { transmission-daemon --no-auth; }
tsm-pause() { transmission-remote -t "$1" --stop; }
tsm-start() { transmission-remote -t "$1" -s; }
tsm-enablealtspeed() { transmission-remote --alt-speed; }
tsm-disablealtspeed() { transmission-remote --no-alt-speed; }
tsm-purge () { transmission-remote -t "$1" --remove-and-delete; }
tsm-remove () { transmission-remote -t "$1" -r; }
tsm-info () { transmission-remote -t "$1" -i; }
tsm-speed () { transmission -t"$1" -i | grep speed; }
tsm-add () { transmission-remote -a "$1"; }
tsm-pauseall () { transmission-remote -tall -S; }
tsm-startall () { transmission-remote -tall -s; }
tsm-search () { echo "================================="; transmission-remote -l | grep -i $1; }

what() {
    curl cheat.sh/$1;
}

nvim-update() {
    current=$(pwd)
    build=${1:-nightly}

    printf "One moment...\n\n"
    sleep 1

    printf "Fetching neovim if necessary\n"
    mkdir -p ~/.neovim
    cd ~/.neovim

    # Check if the file exists and is older than 1 day
    if [ ! -f "nvim-linux64.tar.gz" ] || [ "$(find nvim-linux64.tar.gz -mtime +0)" ]; then
        printf "Downloading neovim...\n"
        sleep 1
        rm -rf nvim-linux64
        rm -rf nvim-linux64.tar.gz
        wget "https://github.com/neovim/neovim/releases/download/$build/nvim-linux64.tar.gz"
        tar -xvzf nvim-linux64.tar.gz
    else
        printf "Neovim is up-to-date\n"
    fi

    stow_dir=$HOME/stow-dotfiles
    stow_dir_hidden=$HOME/.stow-dotfiles

    printf "Pulling stow-dotfiles...\n\n"
    if [ -d "$stow_dir" ]; then
        cd $stow_dir
        git checkout ~/stow-dotfiles/nvim/.config/nvim/lazy-lock.json
    elif [ -d "$stow_dir_hidden" ]; then
        cd $stow_dir_hidden
        git checkout ~/.stow-dotfiles/nvim/.config/nvim/lazy-lock.json
    fi

    pull_output=$(git pull -v)
    printf "%s\n" "$pull_output"

    if [[ "$pull_output" != *"Already up to date."* ]]; then
        printf "\n\nUpdating neovim...\n\n"
        nvim --headless "+Lazy! update" +UpdateRemotePlugins +TSUpdate +qa
        printf "\n\nUpdate complete!\n"
        zsh
    else
        printf "\n\nAll good, no updates are necessary!\n"
    fi

    cd $current
    zsh
}
