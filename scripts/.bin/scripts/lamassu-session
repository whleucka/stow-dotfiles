#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import subprocess
import sys

from iterfzf import iterfzf

hosts = {
    "chainlogic": {"mysql": "chainlogic_cms"},
    "hilt-cms": {"mysql": "cms"},
    "getcoin": {"mysql": "cms"},
}
HOST = ""
SELECTED_SESSION = ""
sessions = []


def get_host():
    global HOST
    while True:
        key_list = list(hosts.keys())
        choices = ", ".join(key_list)
        question = f"Please select a connection (default=chainlogic) [{choices}]: "
        HOST = input(question)
        if HOST in key_list:
            break
        else:
            HOST = "chainlogic"
            break
    return HOST


def get_sessions(server):
    global sessions
    sql = """SELECT txs.session_id, LEFT(Tablet.fingerprint, 5) as fingerprint
    FROM txs
    INNER JOIN Tablet ON txs.tablet_id = Tablet.id
    WHERE txs.created BETWEEN NOW() - INTERVAL 1 WEEK AND NOW()
    UNION
    SELECT incomplete_txs.session_id, LEFT(Tablet.fingerprint, 5) as fingerprint
    FROM incomplete_txs
    INNER JOIN Tablet ON incomplete_txs.tablet_id = Tablet.id
    WHERE incomplete_txs.start_date BETWEEN NOW() - INTERVAL 1 WEEK AND NOW()
    """
    lines = []
    mysql_cmd = hosts[server]["mysql"]
    cmd = f"mysql {mysql_cmd} -e '{sql}'"
    lines = subprocess.run(
        ["/usr/bin/ssh", server, cmd], encoding="utf-8", stdout=subprocess.PIPE
    ).stdout.splitlines()
    # Excluding the header
    for line in lines[1:]:
        session_id, fingerprint = line.split("\t")
        sessions.append(f"{session_id} | {fingerprint}")
    return sessions


def select_session_fingerprint(sessions):
    global SELECTED_SESSION
    if len(sessions) == 0:
        print("There are no sessions available\n")
        sys.exit()
    SELECTED_SESSION = iterfzf(sessions, multi=False)
    session_id, fingerprint = SELECTED_SESSION.split(" | ")
    return (session_id, fingerprint)

def check_file_exists(session_id):
    file_path = f"/home/whleucka/Sessions/{session_id}.txt"
    if os.path.isfile(file_path):
        print(f"File exists: {file_path}")
        with open(file_path, 'r') as file:
            print(file.read())
        sys.exit(0)

def connect(session_id, fingerprint):
    global SELECTED_SESSION
    check_file_exists(session_id)
    print(f"Now connecting -- {HOST}@{fingerprint}")
    pattern = f"/Started tx: {session_id}/,/Started tx/p"
    log_upstart = f'sed -n \\"{pattern}\\" /var/log/upstart/lamassu-machine.log'
    log_upstart_rotated = (
        f'zcat /var/log/upstart/lamassu-machine.log.* | sed -n \\"{pattern}\\"'
    )
    sed_upstart = f"({log_upstart} || {log_upstart_rotated})"
    sed_supervisor = (
        f'sed -n \\"{pattern}\\" /var/log/supervisor/lamassu-machine.err.log'
    )
    cmd = f"/usr/bin/ssh {HOST} -C \"pssh {fingerprint} 'which restart &> /dev/null && {sed_upstart} || {sed_supervisor};'\""
    #os.system(cmd)
    # Open a file in write mode
    with open(f"/home/whleucka/Sessions/{session_id}.txt", "w") as file:
        # Execute the command and capture the output
        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # Write the stdout to the file
        for line in process.stdout:
            file.write(line.decode())

        # Write the stderr to the file (optional, if you want to capture errors as well)
        for line in process.stderr:
            file.write(line.decode())

        # Wait for the process to complete
        process.wait()

    check_file_exists(session_id)


if __name__ == "__main__":
    sessions = get_sessions(get_host())
    session_id, fingerprint = select_session_fingerprint(sessions)
    connect(session_id, fingerprint)
    sys.exit()
