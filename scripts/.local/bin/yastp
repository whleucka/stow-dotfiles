#!/usr/bin/env python3

import itertools
import socket
import subprocess
import sys
import threading
import time

import speedtest


class bcolors:
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


def get_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    ip = s.getsockname()[0]
    s.close()
    return ip


def get_ping(speed_test):
    if speed_test.results.ping:
        sys.stdout.write("\r")
        sys.stdout.flush()
        sys.stdout.write("🔥")
        return speed_test.results.ping

    sys.stdout.write("❌")
    return 0.0


def get_google_ping():
    run = 4
    cmd = f"sudo ping -c {run} google.ca | grep -o 'time=[0-9.]* ms'"
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    lines = result.stdout.strip().split("\n")
    if len(lines) > 0:
        value = float(0)
        for line in lines:
            response = line.replace("time=", "").replace(" ms", "")
            value = value + float(response)
        sys.stdout.write("\r")
        sys.stdout.flush()
        sys.stdout.write("⚡")
        return round(value / run, 1) if value > 0 else 0

    sys.stdout.write("❌")
    return 0.0


def get_download_speed(speed_test):
    try:
        speed = speed_test.download()
        sys.stdout.write("\r")
        sys.stdout.flush()
        sys.stdout.write("🚀")
        return round(speed / 1e6, 2)
    except:
        sys.stdout.write("❌")
    return 0.0


def get_upload_speed(speed_test):
    try:
        speed = speed_test.upload()
        sys.stdout.write("\r")
        sys.stdout.flush()
        sys.stdout.write("🛰️")
        return round(speed / 1e6, 2)
    except:
        sys.stdout.write("❌")
    return 0.0


def select_server(speed_test):
    best = speed_test.get_best_server()
    return best


def get_server(best):
    sys.stdout.write("\r")
    sys.stdout.flush()
    sys.stdout.write("🖥️")
    return best["host"]


def get_country(best):
    sys.stdout.write("\r")
    sys.stdout.flush()
    sys.stdout.write("🌎")
    return best["country"]


print(bcolors.BOLD + bcolors.OKGREEN + "Running speed test...\n" + bcolors.ENDC)
"""
46407) Rogers Wireless (Calgary, AB, Canada) [177.57 km]
17399) Bell Mobility (Calgary, AB, Canada) [177.79 km]
28801) iTel.com (iTel Networks Inc) (Calgary, AB, Canada) [178.05 km]
31362) O-NET (Olds, AB, Canada) [254.28 km]
 4142) Columbia Wireless Inc (Nelson, BC, Canada) [320.97 km]
34879) Blackfoot (Helena, MT, United States) [344.95 km]
21385) Montana Internet Corporation (Helena, MT, United States) [344.95 km]
 7878) The Fusion Network (Helena, MT, United States) [344.95 km]
 5200) Columbia Basin Broadband Corp. (Trail, BC, Canada) [358.11 km]
45518) Intermax Networks (Coeur d'Alene, ID, United States) [363.56 km]
"""
print(f"🏠 Local IP: {get_ip()}")
speed_test = speedtest.Speedtest(secure=True)
speed_test.get_servers(["46407", "17399"])

done = False


def animate():
    for c in itertools.cycle(["⢿", "⣻", "⣽", "⣾", "⣷", "⣯", "⣟", "⡿"]):
        if done:
            break
        sys.stdout.write("\r" + bcolors.BOLD + bcolors.OKGREEN + c + bcolors.ENDC)
        sys.stdout.flush()
        time.sleep(0.1)


t = threading.Thread(target=animate)
t.start()
best = select_server(speed_test)
print(f" Server: {get_server(best)}")
print(f" Country: {get_country(best)}")
print(f" Ping: {get_ping(speed_test)} ms")
print(f" Google: {get_google_ping()} ms (avg)")
print(f" Download: {get_download_speed(speed_test)} Mbps")
print(f" Upload: {get_upload_speed(speed_test)} Mbps")

print("\n" + bcolors.BOLD + bcolors.OKGREEN + "Done!" + bcolors.ENDC)
done = True
